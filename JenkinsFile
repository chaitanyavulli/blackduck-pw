#!/user/bin/env groovy
import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
node('c7-nhdocker')
{
	properties([
		parameters([
			string(defaultValue: 'network', description: 'Defining parameter for repository name', name: 'REPOSITORY_NAME', trim: false),
			string(defaultValue: 'develop', description: 'Defining parameter for branch name', name: 'PW_BRANCH', trim: false),
		])
	])
	def verCode = UUID.randomUUID().toString()
	dir("${verCode}")
	{
		stage('Fetch Product Repository'){
			checkout([$class: 'GitSCM', branches: [[name: '*/${PW_BRANCH}']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '${REPOSITORY_NAME}'], [$class: 'GitLFSPull'], [$class: 'ScmName', name: '${REPOSITORY_NAME}']], userRemoteConfigs: [[credentialsId: 'e8ff24f6-10d1-4129-8c70-7c66d7c2d6d7', url: 'ssh://git@git.parallelwireless.net:7999/cd/${REPOSITORY_NAME}.git']]])
		}
		stage('Build Product'){
			REPONAME = "${REPOSITORY_NAME}".replaceAll("-","");
			if ("$REPONAME" == "2gstack")
			{
				REPONAME="twogstack"
			}
			"$REPONAME"()
		}
		stage('Blackduck Analysis'){
			echo 'start analysis'
		}
		stage('Generate the report'){
			echo 'generate report'
		}
		cleanWs()
	}
}
def network()
{
	sh '''
	cd core/hng/ci_scripts/build/
	python hng-build.py build-docker
	python hng-build.py make clean.all
	python hng-build.py ci_scripts/build/get-3rd-party-pkgs.py
	python hng-build.py ./buildarchive.sh lacrpm 6
	'''
}
def vru4gphy()
{
	dir('vru-4g-phy'){
		sh '''
			sh -xe ci-build.sh
		'''
	}
}
def vru3gphy()
{
	dir('vru-3g-phy'){
		sh '''
			sh -xe ci-build.sh
		'''
	}
}
def vru2gphy()
{
	dir('vru-2g-phy'){
		sh '''
			sh -xe ci-build.sh
		'''
	}
}
def corestacks(){
	dir('core-stacks'){
	    def uid = sh(label: "Read user UID", returnStdout: true, script: "id -u").trim()
        def gid = sh(label: "Read user GID", returnStdout: true, script: "id -g").trim()
        def group = sh(label: "Read user group name", returnStdout: true, script: "id -gn").trim()
        def current_dir = pwd()

        image = docker.build(
            "core-stacks:core-stacks",
                "--build-arg HOME=${HOME} \
                 --build-arg UID=${uid} \
                 --build-arg USER=${USER} \
                 --build-arg GID=${gid} \
                 --build-arg GROUP=${group} \
                 --build-arg PWD=${current_dir} \
                 --build-arg BRANCH=${PW_BRANCH} \
                 -f docker/Dockerfile.user docker"
        )
		image.inside('-v"${HOME}":${HOME}') {
				sh 'make fdd.x86.install.6'
                sh 'make fdd.x86.install.8'
                sh 'make fdd.t2k.install'
                //sh 'make fdd.t3k.install'
                sh 'make tdd.t2k.install'
        }
		
	}
}
def osmo2g(){
	dir('osmo2g'){
        def uid = sh(label: "Read user UID", returnStdout: true, script: "id -u").trim()
        def gid = sh(label: "Read user GID", returnStdout: true, script: "id -g").trim()
        def group = sh(label: "Read user group name", returnStdout: true, script: "id -gn").trim()
        def current_dir = pwd()
        image = docker.build(
            "osmo2g:osmo2g",
            "--build-arg HOME=${HOME} \
             --build-arg UID=${uid} \
             --build-arg USER=${USER} \
             --build-arg GID=${gid} \
             --build-arg GROUP=${group} \
             --build-arg PWD=${current_dir} \
             -f docker/Dockerfile.user docker"
        )
		image.inside('-v"${HOME}":${HOME}') {
            sh 'make osmo-2g.dist'
        }
	}
}
def twogstack(){
	dir('2g-stack'){
		def uid = sh(label: "Read user UID", returnStdout: true, script: "id -u").trim()
        def gid = sh(label: "Read user GID", returnStdout: true, script: "id -g").trim()
        def group = sh(label: "Read user group name", returnStdout: true, script: "id -gn").trim()
        def current_dir = pwd()
        image = docker.build(
            "2g-stack:2g-stack",
            "--build-arg HOME=${HOME} \
             --build-arg UID=${uid} \
             --build-arg USER=${USER} \
             --build-arg GID=${gid} \
             --build-arg GROUP=${group} \
             --build-arg PWD=${current_dir} \
             -f docker/Dockerfile.user docker"
        )
		image.inside('-v"${HOME}":${HOME}') {
            sh """
				pwd
				ls
				make 2g.dist
			"""
        }
	}
}
